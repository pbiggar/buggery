#!/usr/bin/env python

import string
import pprint
import sys
import os
import glob
import re
from optparse import OptionParser # use optparse rather than argparse since it's portable between versions, not just 2.7 and beyond.


try:
  from buggery import Parser
except ImportError, e:
  if str(e) == 'No module named ply.lex' or str(e) == 'No module named ply.yacc':
    sys.exit(
"""PLY (Python Lex-Yacc) library required.

  On ubuntu:
    $ apt-get install python-ply

  Otherwise, download and install from http://www.dabeaz.com/ply/
""")
  raise e


#raise Exception("No top-level task named: " + name)


#######################
# Command-line options
#######################

def parse_command_line():
  parser = OptionParser()
  parser.add_option(  '-l',
                      '--list',
                      action="store_true",
                      default=False,
                      help="List all top-level tasks",
                   )
  parser.add_option(  '--full-list',
                      action="store_true",
                      default=False,
                      help="List all tasks",
                   )
  parser.add_option(  '-f',
                      '--file',
                      action="store",
                      default=None,
                      type="string",
                      help="Read FILE as a buggery file",
                      dest="FILE",
                   )

  return parser.parse_args(sys.argv)

(options, args) = parse_command_line()

# If no task is given, run default.
if len (args) == 1:
  args[0] = "default"



# Find the buggery file
if options.FILE:
  filename = options.FILE
else:
  filenames = glob.glob("*.bgr")
  if len(filenames) > 1:
    raise WhatToDo("more than one file")
  if len(filenames) == 0:
    raise Error("No .bgr (buggery) files found")
  filename = filenames[0]
  print "Running %s" % filename
input = file(filename).read()

# Parse the buggery file
parser = Parser()
ast = parser.parse(input)
sys.exit(1)


##############################################
# Process post-reading command-line options
##############################################
if options.list:
  print ast.top_level_task_list()

if options.full_list:
  print ast.task_list()


##############################################
# Start processing tasks
##############################################

ast.check()

# Always run the startup task
ast.run_top_level_task("startup")
ast.run_top_level_task(task)

#!/usr/bin/env python

import string
import pprint
import sys
import os
import glob
import re
from optparse import OptionParser # use optparse rather than argparse since it's portable between versions, not just 2.7 and beyond.
from buggery.exceptions import CommandError, UserError
import buggery


try:
  from buggery import Parser
except ImportError, e:
  if str(e) == 'No module named ply.lex' or str(e) == 'No module named ply.yacc':
    sys.exit(
"""PLY (Python Lex-Yacc) library required.

  On ubuntu:
    $ apt-get install python-ply

  Otherwise, download and install from http://www.dabeaz.com/ply/
""")
  raise e


#raise Exception("No top-level task named: " + name)


#######################
# Command-line options
#######################

def parse_command_line():
  parser = OptionParser()
  parser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False)
  return parser.parse_args(sys.argv)


def main():
  (options, args) = parse_command_line()
  filename = args[1] if len(args) > 1 else None
  command  = args[2] if len(args) > 2 else None
  args = [buggery.buggery.StringData(arg) for arg in args[3:]]

  # Parse the buggery file
  if filename == None:
    sys.exit("No filename given")
  input = file(filename).read()
  bugger = Parser().parse(input)
  bugger.options = options

##############################################
# Process post-reading command-line options
##############################################


##############################################
# Start processing tasks
##############################################

  if command == None:
    command = "help"

  if command == "help":
    print bugger.help_string()
    sys.exit(0)

  def run_task(name, args):
    result = bugger.run(name, args)
    if result != None:
      print result.as_string()

  run_task("startup", [])
  run_task(command, args)
  run_task("shutdown", [])

if __name__ == "__main__":
  e = None
  try:
    main()
  except CommandError, e:

    def shorten(name, string):
      if string == None:
        return None

      # If it goes beyond one line, or is very long, truncate it and write it to a file.
      new_string = string
      write_to_file = False
      if '\n' in new_string:
        write_to_file = True
        new_string = new_string[0:new_string.index('\n')]

      if len(new_string) > 160:
        write_to_file = True

      if write_to_file:
        filename = "bugger-%s.txt" % name
        file(filename, 'w').write(string)
        return "See %s => '%s...'" % (filename, new_string[0:40])

      assert new_string == string
      return "'%s'" % string

    stdin  = shorten("stdin", e.proc.stdin)
    stdout = shorten("stdout", e.proc.stdout)
    stderr = shorten("stderr", e.proc.stderr)

    print """A command has failed:
  command:   %s
  stdin:     %s
  stdout:    %s
  stderr:    %s
  exit code: %s
  pid:       %s
""" % (e.proc.command, stdin, stdout, stderr, e.proc.exit_code, e.proc.pid)
  except UserError, e:
    print ("%s:%s: %s" % (e.line_number(), e.column_number(), e.message))
    raise


  # Don't catch UserErrors yet

